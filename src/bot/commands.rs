// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
use teloxide::prelude::*;
use teloxide::types::ParseMode;
use sqlx::PgPool;

use crate::{
    bot::keyboards,
    todo::service::TodoService,
    todo::repository::TodoRepository,
    reminder::service::ReminderService,
    reminder::repository::ReminderRepository,
};

type HandlerResult = Result<(), Box<dyn std::error::Error + Send + Sync>>;

/// /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
pub async fn start(bot: Bot, msg: Message, pool: PgPool) -> HandlerResult {
    // –ë–ï–ó–û–ü–ê–°–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let user = msg.from().ok_or("No user in message")?;

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω)
    sqlx::query(
        r#"
        INSERT INTO users (telegram_id, username, first_name)
        VALUES ($1, $2, $3)
        ON CONFLICT (telegram_id)
        DO UPDATE SET last_active_at = CURRENT_TIMESTAMP
        "#,
    )
    .bind(user.id.0 as i64)
    .bind(user.username.as_deref())
    .bind(user.first_name.as_str())
    .execute(&pool)
    .await?;

    let welcome_text = format!(
        "üëã –ü—Ä–∏–≤–µ—Ç, {}!\n\n\
        –Ø ‚Äî –º—É–ª—å—Ç–∏—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫.\n\n\
        üéØ **–ß—Ç–æ —è —É–º–µ—é:**\n\
        ‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ (ToDo)\n\
        ‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\
        üìÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤\n\n\
        –ò—Å–ø–æ–ª—å–∑—É–π /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã.",
        user.first_name
    );

    bot.send_message(msg.chat.id, welcome_text)
        .parse_mode(ParseMode::MarkdownV2)
        .reply_markup(keyboards::main_menu())
        .await?;

    Ok(())
}

/// /help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
pub async fn help(bot: Bot, msg: Message) -> HandlerResult {
    let help_text = r#"üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏:
/addtodo <—Ç–µ–∫—Å—Ç> \- –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
/listtodos \- –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
/completetodo <id> \- –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
/deletetodo <id> \- —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É

–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:
/remind <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç> \- —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
  –ü—Ä–∏–º–µ—Ä: /remind 15m –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á—Ç—É
  –§–æ—Ä–º–∞—Ç—ã: 5m \(–º–∏–Ω—É—Ç—ã\), 2h \(—á–∞—Å—ã\), 1d \(–¥–Ω–∏\)
/listreminders \- –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
/cancelreminder <id> \- –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ

–û–±—â–µ–µ:
/start \- –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help \- —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"#;

    bot.send_message(msg.chat.id, help_text)
        .parse_mode(ParseMode::MarkdownV2)
        .await?;

    Ok(())
}

/// /addtodo - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
pub async fn add_todo(bot: Bot, msg: Message, pool: PgPool, text: String) -> HandlerResult {
    // –í–ê–õ–ò–î–ê–¶–ò–Ø: –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ (–∑–∞—â–∏—Ç–∞ –æ—Ç DoS)
    if text.is_empty() {
        bot.send_message(msg.chat.id, "‚ùå –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            .await?;
        return Ok(());
    }

    if text.len() > 1000 {
        bot.send_message(msg.chat.id, "‚ùå –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å. 1000 —Å–∏–º–≤–æ–ª–æ–≤)!")
            .await?;
        return Ok(());
    }

    let user_id = msg.from().ok_or("No user in message")?.id.0 as i64;

    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    let user: crate::db::models::User = sqlx::query_as(
        "SELECT * FROM users WHERE telegram_id = $1",
    )
    .bind(user_id)
    .fetch_one(&pool)
    .await?;

    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
    let todo_repo = TodoRepository::new(pool);
    let todo_service = TodoService::new(todo_repo);
    let todo = todo_service.create_todo(user.id, text, None, Some(3)).await?;

    bot.send_message(
        msg.chat.id,
        format!("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞\\!\n\nüìù {}\nüÜî ID: {}",
            todo.title.replace("-", "\\-").replace(".", "\\.").replace("!", "\\!"),
            todo.id
        ),
    )
    .parse_mode(ParseMode::MarkdownV2)
    .reply_markup(keyboards::todo_actions(todo.id))
    .await?;

    Ok(())
}

/// /listtodos - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
pub async fn list_todos(bot: Bot, msg: Message, pool: PgPool) -> HandlerResult {
    let user_id = msg.from().ok_or("No user in message")?.id.0 as i64;

    let user: crate::db::models::User = sqlx::query_as(
        "SELECT * FROM users WHERE telegram_id = $1",
    )
    .bind(user_id)
    .fetch_one(&pool)
    .await?;

    let todo_repo = TodoRepository::new(pool);
    let todo_service = TodoService::new(todo_repo);
    let todos = todo_service.list_user_todos(user.id, None, None).await?;

    if todos.is_empty() {
        bot.send_message(msg.chat.id, "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.\n–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é: /addtodo <—Ç–µ–∫—Å—Ç>")
            .await?;
        return Ok(());
    }

    let mut text = "üìã *–í–∞—à–∏ –∑–∞–¥–∞—á–∏:*\n\n".to_string();

    for todo in todos {
        let status_icon = match todo.status.as_str() {
            "completed" => "‚úÖ",
            "in_progress" => "üîÑ",
            "cancelled" => "‚ùå",
            _ => "‚è≥",
        };

        text.push_str(&format!(
            "{} *\\#{}* {}\n   Status: {}\n\n",
            status_icon, todo.id,
            todo.title.replace("-", "\\-").replace(".", "\\.").replace("!", "\\!"),
            todo.status
        ));
    }

    bot.send_message(msg.chat.id, text)
        .parse_mode(ParseMode::MarkdownV2)
        .await?;

    Ok(())
}

/// /completetodo - –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
pub async fn complete_todo(bot: Bot, msg: Message, pool: PgPool, id: i32) -> HandlerResult {
    let user_id = msg.from().ok_or("No user in message")?.id.0 as i64;

    let user: crate::db::models::User = sqlx::query_as(
        "SELECT * FROM users WHERE telegram_id = $1",
    )
    .bind(user_id)
    .fetch_one(&pool)
    .await?;

    let todo_repo = TodoRepository::new(pool.clone());
    let todo_service = TodoService::new(todo_repo);
    let todo = todo_service.get_todo(id).await?;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if todo.user_id != user.id {
        bot.send_message(msg.chat.id, "‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞–¥–∞—á–∞!")
            .await?;
        return Ok(());
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞–ø—Ä—è–º—É—é
    let repo2 = TodoRepository::new(pool);
    repo2.mark_completed(id).await?;

    bot.send_message(msg.chat.id, format!("‚úÖ –ó–∞–¥–∞—á–∞ #{} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!", id))
        .await?;

    Ok(())
}

/// /deletetodo - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
pub async fn delete_todo(bot: Bot, msg: Message, pool: PgPool, id: i32) -> HandlerResult {
    let user_id = msg.from().ok_or("No user in message")?.id.0 as i64;

    let user: crate::db::models::User = sqlx::query_as(
        "SELECT * FROM users WHERE telegram_id = $1",
    )
    .bind(user_id)
    .fetch_one(&pool)
    .await?;

    let todo_repo = TodoRepository::new(pool.clone());
    let todo_service = TodoService::new(todo_repo);
    let todo = todo_service.get_todo(id).await?;

    if todo.user_id != user.id {
        bot.send_message(msg.chat.id, "‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞–¥–∞—á–∞!")
            .await?;
        return Ok(());
    }

    todo_service.delete_todo(id).await?;

    bot.send_message(msg.chat.id, format!("üóë –ó–∞–¥–∞—á–∞ #{} —É–¥–∞–ª–µ–Ω–∞!", id))
        .await?;

    Ok(())
}

/// /remind - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
pub async fn set_reminder(bot: Bot, msg: Message, pool: PgPool, text: String) -> HandlerResult {
    // –ü–∞—Ä—Å–∏–º —Ñ–æ—Ä–º–∞—Ç: "15m –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á—Ç—É" –∏–ª–∏ "2h –í—Å—Ç—Ä–µ—á–∞"
    let parts: Vec<&str> = text.splitn(2, ' ').collect();

    if parts.len() < 2 {
        bot.send_message(
            msg.chat.id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /remind <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç>\n–ü—Ä–∏–º–µ—Ä: /remind 15m –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á—Ç—É",
        )
        .await?;
        return Ok(());
    }

    let time_str = parts[0];
    let reminder_text = parts[1];

    // –í–ê–õ–ò–î–ê–¶–ò–Ø: –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    if reminder_text.len() > 500 {
        bot.send_message(msg.chat.id, "‚ùå –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å. 500 —Å–∏–º–≤–æ–ª–æ–≤)!")
            .await?;
        return Ok(());
    }

    // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
    let duration = parse_duration(time_str)?;
    let _remind_time = chrono::Utc::now() + duration;

    let user_id = msg.from().ok_or("No user in message")?.id.0 as i64;
    let user: crate::db::models::User = sqlx::query_as(
        "SELECT * FROM users WHERE telegram_id = $1",
    )
    .bind(user_id)
    .fetch_one(&pool)
    .await?;

    let reminder_repo = ReminderRepository::new(pool);
    let reminder_service = ReminderService::new(reminder_repo);
    let reminder = reminder_service
        .create_reminder(user.id, None, &format!("{}m", duration.num_minutes()), Some(reminder_text.to_string()))
        .await?;

    bot.send_message(
        msg.chat.id,
        format!(
            "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n\nüìù {}\nüïê –ù–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ {}\nüÜî ID: {}",
            reminder_text, time_str, reminder.id
        ),
    )
    .await?;

    Ok(())
}

/// /listreminders - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
pub async fn list_reminders(bot: Bot, msg: Message, pool: PgPool) -> HandlerResult {
    let user_id = msg.from().ok_or("No user in message")?.id.0 as i64;

    let user: crate::db::models::User = sqlx::query_as(
        "SELECT * FROM users WHERE telegram_id = $1",
    )
    .bind(user_id)
    .fetch_one(&pool)
    .await?;

    let reminder_repo = ReminderRepository::new(pool);
    let reminders = reminder_repo.find_by_user(user.id).await?;

    if reminders.is_empty() {
        bot.send_message(msg.chat.id, "‚è∞ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
            .await?;
        return Ok(());
    }

    let mut text = "‚è∞ *–ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:*\n\n".to_string();

    for reminder in reminders {
        text.push_str(&format!(
            "üÜî \\#{} \\- {}\nüïê {}\n\n",
            reminder.id,
            reminder.message.as_deref().unwrap_or("–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞").replace("-", "\\-").replace(".", "\\."),
            reminder.remind_at.format("%d\\.%m\\.%Y %H:%M")
        ));
    }

    bot.send_message(msg.chat.id, text)
        .parse_mode(ParseMode::MarkdownV2)
        .await?;

    Ok(())
}

/// /cancelreminder - –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
pub async fn cancel_reminder(bot: Bot, msg: Message, pool: PgPool, id: i32) -> HandlerResult {
    let user_id = msg.from().ok_or("No user in message")?.id.0 as i64;

    let user: crate::db::models::User = sqlx::query_as(
        "SELECT * FROM users WHERE telegram_id = $1",
    )
    .bind(user_id)
    .fetch_one(&pool)
    .await?;

    let reminder_repo = ReminderRepository::new(pool.clone());
    let reminder = reminder_repo.find_by_id(id).await?;

    if reminder.user_id != user.id {
        bot.send_message(msg.chat.id, "‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!")
            .await?;
        return Ok(());
    }

    let repo2 = ReminderRepository::new(pool);
    repo2.delete(id).await?;

    bot.send_message(msg.chat.id, format!("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{} –æ—Ç–º–µ–Ω–µ–Ω–æ!", id))
        .await?;

    Ok(())
}

/// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
pub async fn handle_message(bot: Bot, msg: Message) -> HandlerResult {
    bot.send_message(msg.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
        .await?;
    Ok(())
}

/// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
pub async fn handle_callback(bot: Bot, q: CallbackQuery) -> HandlerResult {
    if let Some(data) = &q.data {
        bot.answer_callback_query(&q.id).await?;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–∞–Ω–Ω—ã—Ö
        tracing::info!("Callback received: {}", data);
    }
    Ok(())
}

/// –ü–∞—Ä—Å–∏–Ω–≥ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ (5m, 2h, 1d)
fn parse_duration(s: &str) -> Result<chrono::Duration, Box<dyn std::error::Error + Send + Sync>> {
    let len = s.len();
    if len < 2 {
        return Err("Invalid duration format".into());
    }

    let num: i64 = s[..len-1].parse()?;

    // –í–ê–õ–ò–î–ê–¶–ò–Ø: –∑–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    if num <= 0 {
        return Err("Duration must be positive".into());
    }

    if num > 365 {
        return Err("Duration too large (max 365 units)".into());
    }

    let unit = &s[len-1..];

    match unit {
        "m" => Ok(chrono::Duration::minutes(num)),
        "h" => Ok(chrono::Duration::hours(num)),
        "d" => Ok(chrono::Duration::days(num)),
        _ => Err("Invalid time unit (use m, h, or d)".into()),
    }
}
