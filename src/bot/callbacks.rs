// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline –∫–Ω–æ–ø–æ–∫
use teloxide::prelude::*;

pub type CallbackResult = Result<(), Box<dyn std::error::Error + Send + Sync>>;

/// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –∑–∞–¥–∞—á
pub async fn handle_todo_callback(
    bot: Bot,
    query: CallbackQuery,
    data: String,
) -> CallbackResult {
    bot.answer_callback_query(&query.id).await?;

    if data.starts_with("complete_") {
        let todo_id = data.strip_prefix("complete_").unwrap().parse::<i32>()?;
        // –õ–æ–≥–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        if let Some(Message { chat, .. }) = query.message {
            bot.send_message(chat.id, format!("‚úÖ –ó–∞–¥–∞—á–∞ #{} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!", todo_id))
                .await?;
        }
    } else if data.starts_with("delete_") {
        let todo_id = data.strip_prefix("delete_").unwrap().parse::<i32>()?;
        if let Some(Message { chat, .. }) = query.message {
            bot.send_message(chat.id, format!("üóë –ó–∞–¥–∞—á–∞ #{} —É–¥–∞–ª–µ–Ω–∞!", todo_id))
                .await?;
        }
    }

    Ok(())
}
