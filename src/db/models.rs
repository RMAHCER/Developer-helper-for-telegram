// Database models - —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
//
// –ú–æ–¥–µ–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü–∞–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
// –ò—Å–ø–æ–ª—å–∑—É—é—Ç derive(sqlx::FromRow) –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞

use crate::shared::types::{ConversionStatus, DbId, Priority, TelegramUserId, Timestamp, TodoStatus};
use chrono::Utc;
use serde::{Deserialize, Serialize};

/// –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#[derive(Debug, Clone, Serialize, Deserialize, sqlx::FromRow)]
pub struct User {
    pub id: DbId,
    pub telegram_id: TelegramUserId,
    pub username: Option<String>,
    pub first_name: Option<String>,
    pub language_code: String,
    pub created_at: Timestamp,
    pub last_active_at: Timestamp,
}

/// –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#[derive(Debug, Clone)]
pub struct NewUser {
    pub telegram_id: TelegramUserId,
    pub username: Option<String>,
    pub first_name: Option<String>,
    pub language_code: String,
}

impl User {
    /// –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    pub fn touch(&mut self) {
        self.last_active_at = Utc::now();
    }
}

/// –ú–æ–¥–µ–ª—å –∑–∞–¥–∞—á–∏ (Todo)
#[derive(Debug, Clone, Serialize, Deserialize, sqlx::FromRow)]
pub struct Todo {
    pub id: DbId,
    pub user_id: DbId,
    pub title: String,
    pub description: Option<String>,
    pub status: TodoStatus,
    pub priority: Priority,
    pub created_at: Timestamp,
    pub updated_at: Timestamp,
    pub completed_at: Option<Timestamp>,
}

/// –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
#[derive(Debug, Clone)]
pub struct NewTodo {
    pub user_id: DbId,
    pub title: String,
    pub description: Option<String>,
    pub priority: Priority,
}

/// –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
#[derive(Debug, Clone, Default)]
pub struct UpdateTodo {
    pub title: Option<String>,
    pub description: Option<String>,
    pub status: Option<TodoStatus>,
    pub priority: Option<Priority>,
}

impl Todo {
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞
    pub fn is_completed(&self) -> bool {
        self.status == TodoStatus::Completed
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
    pub fn status_emoji(&self) -> &'static str {
        match self.status {
            TodoStatus::Pending => "‚è≥",
            TodoStatus::InProgress => "üîÑ",
            TodoStatus::Completed => "‚úÖ",
            TodoStatus::Cancelled => "‚ùå",
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    pub fn priority_emoji(&self) -> &'static str {
        match self.priority {
            1 => "üî¥", // Highest
            2 => "üü†",
            3 => "üü°",
            4 => "üü¢",
            5 => "‚ö™", // Lowest
            _ => "‚ö™",
        }
    }
}

/// –ú–æ–¥–µ–ª—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
#[derive(Debug, Clone, Serialize, Deserialize, sqlx::FromRow)]
pub struct Reminder {
    pub id: DbId,
    pub todo_id: Option<DbId>,
    pub user_id: DbId,
    pub remind_at: Timestamp,
    pub message: Option<String>,
    pub is_sent: bool,
    pub sent_at: Option<Timestamp>,
    pub is_recurring: bool,
    pub recurrence_pattern: Option<String>,
    pub created_at: Timestamp,
}

/// –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
#[derive(Debug, Clone)]
pub struct NewReminder {
    pub user_id: DbId,
    pub todo_id: Option<DbId>,
    pub remind_at: Timestamp,
    pub message: Option<String>,
    pub is_recurring: bool,
    pub recurrence_pattern: Option<String>,
}

impl Reminder {
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ—Ä–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    pub fn should_send(&self) -> bool {
        !self.is_sent && self.remind_at <= Utc::now()
    }
}

/// –ú–æ–¥–µ–ª—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞
#[derive(Debug, Clone, Serialize, Deserialize, sqlx::FromRow)]
pub struct FileConversion {
    pub id: DbId,
    pub user_id: DbId,
    pub source_file_id: Option<String>,
    pub source_format: Option<String>,
    pub target_format: Option<String>,
    pub status: Option<String>,
    pub result_file_path: Option<String>,
    pub error_message: Option<String>,
    pub created_at: Timestamp,
    pub completed_at: Option<Timestamp>,
}

/// –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
#[derive(Debug, Clone)]
pub struct NewFileConversion {
    pub user_id: DbId,
    pub source_file_id: String,
    pub source_format: String,
    pub target_format: String,
}

impl FileConversion {
    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–∫ enum
    pub fn get_status(&self) -> ConversionStatus {
        match self.status.as_deref() {
            Some("pending") => ConversionStatus::Pending,
            Some("processing") => ConversionStatus::Processing,
            Some("completed") => ConversionStatus::Completed,
            Some("failed") => ConversionStatus::Failed,
            _ => ConversionStatus::Pending,
        }
    }
}
