// Main entry point –¥–ª—è Telegram –±–æ—Ç–∞
use anyhow::Result;
use telegram_multitool_bot::{
    config::Config,
    db::pool::create_pool,
    reminder::scheduler::ReminderScheduler,
    shared::telemetry,
};
use teloxide::prelude::*;

#[tokio::main]
async fn main() -> Result<()> {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    telemetry::init_telemetry().map_err(|e| anyhow::anyhow!(e))?;
    tracing::info!("üöÄ Starting Telegram Multitool Bot...");

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ .env
    dotenv::dotenv().ok();
    let config = Config::from_env()?;
    tracing::info!("‚úÖ Configuration loaded");

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    let db_pool = create_pool(&config.database).await?;
    tracing::info!("‚úÖ Database pool created");

    // –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π
    telegram_multitool_bot::db::migrations::run_migrations(&db_pool).await?;
    tracing::info!("‚úÖ Database migrations completed");

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    let bot = Bot::new(&config.telegram.bot_token);
    tracing::info!("‚úÖ Bot initialized");

    // –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (—Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞)
    let scheduler = ReminderScheduler::new(db_pool.clone(), bot.clone());
    let scheduler_handle = tokio::spawn(async move {
        if let Err(e) = scheduler.run().await {
            tracing::error!("‚ùå Reminder scheduler error: {}", e);
        }
    });
    tracing::info!("‚úÖ Reminder scheduler started");

    // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∫–æ–º–∞–Ω–¥
    let handler = telegram_multitool_bot::bot::handlers::schema();

    tracing::info!("‚úÖ Starting bot dispatcher...");
    tracing::info!("Bot is ready to receive messages!");

    // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å long polling
    Dispatcher::builder(bot, handler)
        .dependencies(dptree::deps![db_pool])
        .enable_ctrlc_handler()
        .build()
        .dispatch()
        .await;

    // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    scheduler_handle.await?;

    tracing::info!("üëã Bot stopped");
    Ok(())
}
