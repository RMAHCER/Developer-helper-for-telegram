// Todo handlers - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è todo –º–æ–¥—É–ª—è
//
// Handlers —Å–≤—è–∑—ã–≤–∞—é—Ç Telegram –∫–æ–º–∞–Ω–¥—ã —Å business logic
// –§–æ—Ä–º–∞—Ç–∏—Ä—É—é—Ç –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

use crate::error::Result;
use crate::shared::types::TodoStatus;
use crate::todo::models::TodoView;

/// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
pub fn format_todo_list(todos: Vec<TodoView>) -> String {
    if todos.is_empty() {
        return "üìù You have no tasks yet.\n\nUse /newtodo to create one!".to_string();
    }

    let mut output = format!("üìù Your Tasks ({}):\n\n", todos.len());

    for (idx, todo) in todos.iter().enumerate() {
        output.push_str(&format!(
            "{}. {} {} *{}*\n",
            idx + 1,
            todo.status_emoji,
            todo.priority_emoji,
            escape_markdown(&todo.title)
        ));

        if let Some(desc) = &todo.description {
            if !desc.is_empty() {
                let short_desc = if desc.len() > 50 {
                    format!("{}...", &desc[..50])
                } else {
                    desc.clone()
                };
                output.push_str(&format!("   _{}_\n", escape_markdown(&short_desc)));
            }
        }

        output.push_str(&format!("   ID: {} | Priority: {}\n\n", todo.id, todo.priority));
    }

    output.push_str("üí° Use /todo <id> to view details");
    output
}

/// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏
pub fn format_todo_details(todo: &TodoView) -> String {
    let mut output = format!(
        "{} {} *Task #{}*\n\n",
        todo.status_emoji, todo.priority_emoji, todo.id
    );

    output.push_str(&format!("*Title:* {}\n\n", escape_markdown(&todo.title)));

    if let Some(desc) = &todo.description {
        if !desc.is_empty() {
            output.push_str(&format!("*Description:*\n{}\n\n", escape_markdown(desc)));
        }
    }

    output.push_str(&format!(
        "*Status:* {}\n*Priority:* {}\n*Created:* {}\n",
        todo.status, todo.priority, todo.created_at
    ));

    output.push_str("\nüí° Commands:\n");
    output.push_str(&format!("‚Ä¢ /complete {} - Mark as done\n", todo.id));
    output.push_str(&format!("‚Ä¢ /delete {} - Delete task\n", todo.id));

    output
}

/// –≠—Å–∫–µ–π–ø–∏–Ω–≥ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown
fn escape_markdown(text: &str) -> String {
    text.replace('_', "\\_")
        .replace('*', "\\*")
        .replace('[', "\\[")
        .replace('`', "\\`")
}

/// –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤ enum
pub fn parse_status(status_str: &str) -> Result<TodoStatus> {
    status_str.parse()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_escape_markdown() {
        let input = "Test *bold* and _italic_";
        let escaped = escape_markdown(input);
        assert!(escaped.contains("\\*"));
        assert!(escaped.contains("\\_"));
    }
}
